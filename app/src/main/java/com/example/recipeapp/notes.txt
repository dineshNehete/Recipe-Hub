
GENERAL THEORY

A ViewModel is a class that is responsible for preparing and managing the data for an Activity or Fragment. It is designed to store and manage UI-related data in a lifecycle conscious way, surviving configuration changes such as screen rotations.

One of the main benefits of using a ViewModel is that it allows you to separate your UI data from your Activity or Fragment, which can make your code easier to test and maintain. Instead of storing UI data directly in the Activity or Fragment, you can store it in the ViewModel and observe changes to that data in the Activity or Fragment. This can make it easier to test the UI data logic in isolation, and can also make it easier to update the UI in response to changes in the data.


ViewModelProvider is a class in Android that is used to provide instances of ViewModel classes for an Activity or Fragment. It is part of the Android Architecture Components library, which provides a set of classes and tools for building Android apps using a MVVM(Model-View-ViewModel) architecture.
The ViewModelProvider class has a get() method that you can use to retrieve a ViewModel instance for a given Activity or Fragment. The ViewModelProvider will take care of creating a new instance of the ViewModel if one does not already exist, or it will return the existing instance if one has already been created.

ViewModelProvider(this)[HomeViewModel::class.java]


MEAL ACTIVITY AND LAYOUT INFO:
With the help of a CoordinatorLayout, child views work together harmoniously to implement awesome behaviours such as drags, swipes, flings, or any other gestures.

AppbarLayout ->  If you want just to include the Toolbar without any scrolling effects you can use Toolbar. But if you want to make some scrolling effects like on the images you need to use AppBarLayout.

In general, you should use the "android" namespace for attributes that are part of the Android framework, and you should use the "app" namespace for attributes that are part of the Android support library. This will help to ensure that your layout files are correctly interpreted by the Android system and that your app behaves as expected on all devices.




MVVM STEPS :
Step 1 : Create a ViewModel for the activity of fragment.
Step 2 : Inherit from the ViewModel class and call the constructor, also give a primary constructor to the custom ViewModel class.
Step 3 : The purpose of view model is to separate logic and observe data from outside, therefore create livedata variables of type `MutableLiveData<Model class Name>`.
 eg. "private var randomMealLiveData = MutableLiveData<Meal>()"
Step 4 : Create a function to make an actual call eg. getRandomMeal() in this case
Step 5 : Now to observe this data from outside you need to return this, therefore one function for that. But this should return Livedata type because once we get this value we don't want to change the value.
 fun observeRandomMealLiveData(): LiveData<Meal> {
        return randomMealLiveData
    }

Step 6 : Create a activityMvvm variable which will give the function calls defined in the viewmodel. type must be custome view model class name and also a variable which will hold the object returned from the view model.
Step 7 : Initialize this variable.
	eg. homeMvvm = ViewModelProvider(this)[HomeViewModel::class.java]
Step 8 : In onViewcreated or any other method call the method defined in the custom view model which will fetch and return the livedata.
Step 9 : Create a observer function to observe this behavior and if the data returned is not null then assign it to the variable created. eg.
		private fun observerRandomMeal() {
        homeMvvm.observeRandomMealLiveData().observe(viewLifecycleOwner, object : Observer<Meal> {
            override fun onChanged(meal: Meal?) {
                if (meal != null) {
                    Glide.with(this@HomeFragment).load(meal.strMealThumb)
                        .into(binding?.ivRandomMeal!!)
                    // the local variable now has all the information about the random meal fetched from the API
                    this@HomeFragment.randomMeal = meal
                }
            }

        })
    }



While considering the RoomDB :
keep in mind -> Entity, Dao, Builder(to build the database), Type Convertor (to convert into primitive data type)

# Entity ( analogous to object in programming )

# Dao(Data access object)
 - Data Access Objects are the main classes where you define your database interactions. They can include a variety of query         methods.
 - The class marked with @Dao should either be an interface or an abstract class. At compile time, Room will generate an             implementation of this class when it is referenced by a Database.

# Database
 - This class is annotated with @ database and extends the room database.
 - It contains the database setup with the entity and serves as the main access point to the database access point.


 Creating an object using a function, such as the example provided in the abstract statement "fun mealDao() : MealDao," is a common technique in software development known as a factory method. This approach allows for the encapsulation of object creation logic in a single location, making it more organized and easier to modify or update in the future. Additionally, it allows for greater flexibility in the types of objects that can be created and returned, as the factory method can implement various conditions or logic to determine which specific implementation of the desired object should be instantiated and returned.


 If you do not want to use a factory method to create an object, you can simply instantiate the object directly using the "new" keyword or a constructor. For example, instead of using the "fun mealDao() : MealDao" factory method, you could instantiate a MealDao object using the following code:

 val mealDao = MealDao()

 This will create a new instance of the MealDao class and assign it to the variable "mealDao."

 Alternatively, you can use Dependency Injection frameworks like Dagger, Koin, etc to manage object creation, configuration and dependency injection.







 ViewModel Scope Dependency:
 A ViewModel is a class that is responsible for preparing and managing the data for an Activity or a Fragment. It also survives configuration changes such as screen rotations, so the data it holds is not lost.

 When you use a ViewModel, you can use the scope dependency to manage the lifecycle of the ViewModel. A scope dependency allows you to specify the lifecycle of the ViewModel, so it can be created and destroyed along with the lifecycle of the associated UI component.

 For example, when you use the "ViewModelScopes.ofActivity()" or "ViewModelScopes.ofFragment()" method from the ViewModel library, it creates a ViewModel that is scoped to the lifecycle of the Activity or Fragment. This means that the ViewModel is created when the Activity or Fragment is created, and it is destroyed when the Activity or Fragment is destroyed.

 By using a scope dependency, you can ensure that the ViewModel is only created when it is needed and that it is destroyed when it is no longer needed, which can help to prevent memory leaks and improve the performance of your app.

 Furthermore, when you use scope dependency, you can also define the scope of data that will be retained during configuration changes, this way it can be reused instead of recreating it. This can be very helpful in reducing the network calls and improve the performance of the application.

 "androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.0"